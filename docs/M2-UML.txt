@startuml
interface domain.IController {
+retrieve() : MegaContainer
+execute() : void
}
interface data_source.IContainer {
+getName() : String
}
interface domain.IDiagram {
+concatenateFinalString() : String
}
interface domain.IUMLDiagram {
+fillInterfaceMethods() : void
+fillFields() : void
+fillArgs() : void
+fillClassMethods() : void
+createRelation() : void
+createClass() : void
+createInterface() : void
}
interface domain.IParser {
+generateIncompatible() : void
+checkCompatibility() : boolean
}
class domain.ClassParser {
#className : String
+generateIncompatible() : void
+checkCompatibility(String : parserType) : boolean
}
class domain.BasicParser {
}
class data_source.Field {
+type : String
+name : String
+accessLevel : int
}
class domain.DiagramUMLforPlantUML {
-MEGA : MegaContainer
-visibilityAccess : int
-parser : IParser
-finalString : StringBuilder
-accessLevelSymbol(int : accessLevel) : String
+concatenateFinalString(MegaContainer : MEGA) : String
}
class data_source.FileReader {
-location : String
+blockEm() : HashSet
}
class data_source.Class {
+methods : HashMap
+accessLevel : int
+fields : HashSet
+name : String
+superclass : String
+inherited : HashSet
}
class domain.ParserDecorator {
+parser : IParser
}
class domain.BlackListParser {
-incompatible : HashSet
-fileName : String
+fileName() : String
+generateIncompatible() : void
+checkCompatibility(String : parserType) : boolean
}
class domain.ConstructParser {
-diagrams : HashMap
-outputFilename : String
-controllerType : String
-bp : IParser
-diagramType : String
-controllers : HashMap
-inputArgs : HashSet
-DEFAULT_OUTNAME : String
-populateControllers() : void
+beginParsing() : void
-populateDiagrams() : void
}
class data_source.MegaContainer {
+interfaces : HashMap<String, Interface>
+classes : HashMap<String, Class>
+relations : HashMap<String, HashSet<Relation>>
}
class domain.ASMController {
-classNode : ClassNode
-reader : ClassReader
-input : IParser
-classNames : List
-blackListFile : String
-blacklist : HashSet
-recursion : boolean
-MEGA : MegaContainer
-recursiveMethod(String : currentClass) : void
-createAccessLevel(int : accessLevel) : int
-methodArgumentGetter(List : methods) : HashMap
-parseRelations() : void
-createType(String : type) : String
-parseClass(String : givenClass) : void
-nonRecursiveMethod(String : currentClass) : void
-parseInterfaces(String : givenClass) : void
}
class data_source.Argument {
+name : String
+type : String
}
class domain.OutputParser {
-fileName : String
-incompatible : HashSet
+generateIncompatible() : void
+checkCompatibility(String : parserType) : boolean
}
class domain.AccessParser {
#level : int
#incompatible : HashSet
+generateIncompatible() : void
+checkCompatibility(String : parserType) : boolean
}
class data_source.LogWriter {
-location : String
+writeText(String : text) : void
}
class data_source.Relation {
+classFrom : IContainer
+accessLevel : int
+classTo : IContainer
+name : String
+type : String
}
class presentation.Main {
+main(String : args) : void
}
class domain.RecursiveParser {
#incompatible : HashSet
~enabled : boolean
+generateIncompatible() : void
+checkCompatibility(String : parserType) : boolean
+enabled() : boolean
}
class data_source.Method {
+name : String
+returnType : String
+accessLevel : int
+parameters : HashSet
}
class data_source.Interface {
+name : String
+inherited : HashSet
+accessLevel : int
+methods : HashMap
}

class data_source.ParseRelationships{
+MEGA : MegaContainer
buildInheritances();
buildAssociations();
buildDependencies();
}

domain.ASMController..>data_source.ParseRelationships
domain.BasicParser..|>domain.IParser
data_source.Method..|>data_source.IContainer
domain.BlackListParser..|>domain.ParserDecorator
data_source.MegaContainer..|>data_source.IContainer
data_source.Relation..|>data_source.IContainer
domain.ASMController..|>domain.IController
data_source.Field..|>data_source.IContainer
data_source.Argument..|>data_source.IContainer
domain.DiagramUMLforPlantUML..|>domain.IUMLDiagram
data_source.Class..|>data_source.IContainer
domain.OutputParser..|>domain.ParserDecorator
domain.AccessParser..|>domain.ParserDecorator
data_source.Interface..|>data_source.IContainer
domain.IUMLDiagram..|>domain.IDiagram
domain.ClassParser..|>domain.ParserDecorator
domain.RecursiveParser..|>domain.ParserDecorator
domain.ParserDecorator..|>domain.IParser

presentation.Main-->domain.ConstructParser

domain.ConstructParser-->domain.IDiagram
domain.ConstructParser-->domain.IController
domain.ConstructParser-->domain.IParser
domain.ConstructParser-->data_source.LogWriter

domain.IController-->data_source.FileReader
domain.IController-->data_source.IContainer
@enduml